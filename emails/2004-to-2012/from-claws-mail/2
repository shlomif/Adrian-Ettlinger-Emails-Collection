Received: (qmail 6534 invoked from network); 22 Sep 2005 20:19:54 -0000
Received: from pre-smtp01-02.prod.mesa1.secureserver.net ([64.202.166.24])
          (envelope-sender <aettlinger@worldnet.att.net>)
          by smtp01-01.prod.mesa1.secureserver.net (qmail-ldap-1.03) with SMTP
          for <shlomif@episight.com>; 22 Sep 2005 20:19:54 -0000
Received: (qmail 14876 invoked from network); 22 Sep 2005 20:19:54 -0000
Received: from iglu.org.il (HELO eskimo.iglu.org.il) ([192.117.122.34])
          (envelope-sender <aettlinger@worldnet.att.net>)
          by pre-smtp01-02.prod.mesa1.secureserver.net (qmail-ldap-1.03) with SMTP
          for <shlomif@episight.com>; 22 Sep 2005 20:19:52 -0000
Received: (qmail 26401 invoked by alias); 22 Sep 2005 20:19:37 -0000
Delivered-To: iglu.org.il-shlomif@iglu.org.il
Received: (qmail 26399 invoked from network); 22 Sep 2005 20:19:36 -0000
Received: from mtiwmhc11.worldnet.att.net (204.127.131.115)
  by iglu.org.il with SMTP; 22 Sep 2005 20:19:36 -0000
Received: from PC248541693324 (138.white-plains-11-13rs.ny.dial-access.att.net[12.76.38.138])
          by worldnet.att.net (mtiwmhc11) with SMTP
          id <2005092220193111100iib3ve>; Thu, 22 Sep 2005 20:19:32 +0000
Message-ID: <004201c5bfb2$f05d2fd0$8a264c0c@PC248541693324>
From: "Adrian Ettlinger" <aettlinger@worldnet.att.net>
To: "Shlomi Fish" <shlomif@iglu.org.il>
Subject: Fw: Eureka!
Date: Thu, 22 Sep 2005 16:07:49 -0400
MIME-Version: 1.0
Content-Type: multipart/mixed;
  boundary="----=_NextPart_000_0036_01C5BF8F.C76DFD70"
X-Priority: 3
X-MSMail-Priority: Normal
X-Mailer: Microsoft Outlook Express 6.00.2900.2180
X-MimeOLE: Produced By Microsoft MimeOLE V6.00.2900.2180
X-Nonspam: None
X-Spam-Checker-Version: SpamAssassin 3.0.4 (2005-06-05) on 
	localhost.localdomain
X-Spam-Level: 
X-Spam-Status: No, score=-2.5 required=5.0 tests=AWL,BAYES_00,
	MIME_QP_LONG_LINE autolearn=ham version=3.0.4
X-UID: 
Status: RO
X-Status: RT
X-KMail-EncryptionState: N
X-KMail-SignatureState: N
X-KMail-MDN-Sent: 

This is a multi-part message in MIME format.

------=_NextPart_000_0036_01C5BF8F.C76DFD70
Content-Type: text/plain;
	format=flowed;
	charset="iso-8859-1";
	reply-type=original
Content-Transfer-Encoding: 7bit


----- Original Message ----- 
From: "Adrian Ettlinger" <aettlinger@att.net>
To: "Kai Hentschel" <kh@khcon.com>
Sent: Thursday, July 28, 2005 12:38 PM
Subject: Eureka!


> Hi Kai,
>
>    Finally ran it down.  Substitute the attached copy of fc_pro_iface.c.
>
>    What was throwing me was searching for that symbol with the prepended
> underbar as part of it.
>
>    I should now do some exploring to see if any other of the files in that
> file set have been supeceded by later ones.  But this should enable you to
> get a clean compilation.
>
> <<Debug and Release except that I removed the LIBC.LIB for the Debug
> compile>>
>    That was the main reason I suggested using the Release configuration.
> But Release is more advisable anyway, for more compact code.
>
> Best regards, ------------------Adrian
> 

------=_NextPart_000_0036_01C5BF8F.C76DFD70
Content-Type: application/octet-stream;
	name="fc_pro_iface.c"
Content-Transfer-Encoding: quoted-printable
Content-Disposition: attachment;
	filename="fc_pro_iface.c"

#include <stdlib.h>=0A=

#include <stdio.h>=0A=

#include <string.h>=0A=

#include <assert.h>=0A=

=0A=

#if 0=0A=

#include "Fcsolvex.h"=0A=

#else=0A=

#include "main.h"=0A=

#include "Fcsolve.h"=0A=

#endif=0A=

#include "fcs_user.h"=0A=

#include "fcs_cl.h"=0A=

//extern int signal_step(int) ;=0A=

int NumFCs ;=0A=

char * moves_string;=0A=

static const char * ranks_map =3D "0A23456789TJQK";=0A=

=0A=

char szTemp[50] ;=0A=

=0A=

static char * rank_to_string(int rank, char * buf)=0A=

{=0A=

    buf[0] =3D ranks_map[rank];=0A=

    buf[1] =3D '\0';=0A=

    return buf;=0A=

}=0A=

=0A=

static const char * suits_map =3D "CDSH";=0A=

=0A=

static char * suit_to_string(int suit, char * buf)=0A=

{=0A=

    buf[0] =3D suits_map[suit];=0A=

    buf[1] =3D '\0';=0A=

    return buf;=0A=

}=0A=

=0A=

static char * card_to_string(Card card, char * buf)=0A=

{=0A=

    rank_to_string(card&0x0F,buf);=0A=

    suit_to_string(card>>4,buf+1);=0A=

=0A=

    return buf;=0A=

}=0A=

=0A=

static char * position_to_string(Position * pos, int num_freecells)=0A=

{=0A=

    int a, stack;=0A=

    char buffer[4000], temp[4][20];=0A=

    char * s_end;=0A=

=0A=

    buffer[0] =3D '\0';=0A=

    s_end =3D buffer;=0A=

    =0A=

    for(a=3D0;a<4;a++)=0A=

    {=0A=

        if (pos->foundations[a] !=3D 0)=0A=

        {=0A=

            break;=0A=

        }=0A=

    }=0A=

    if (a < 4)=0A=

    {=0A=

        s_end +=3D sprintf(s_end, "Foundations:");=0A=

        for(a=3D0;a<4;a++)=0A=

        {=0A=

            if (pos->foundations[a] !=3D 0)=0A=

            {=0A=

                s_end +=3D sprintf(=0A=

                    s_end, =0A=

                    " %s-%s", =0A=

                    suit_to_string(a, temp[0]),=0A=

                    rank_to_string(pos->foundations[a], temp[1])=0A=

                    );=0A=

            }=0A=

        }=0A=

        *s_end =3D '\n';=0A=

        s_end++;=0A=

    }=0A=

    s_end +=3D sprintf(s_end, "Freecells:");=0A=

    for(a=3D0;a<num_freecells;a++)=0A=

    {=0A=

        if (pos->hold[a] =3D=3D 0)=0A=

        {=0A=

            s_end +=3D sprintf(s_end, " -");=0A=

        }=0A=

        else=0A=

        {=0A=

            s_end +=3D sprintf(s_end, " %s", =
card_to_string(pos->hold[a], temp[0]));=0A=

        }=0A=

    }=0A=

    *s_end =3D '\n';=0A=

    s_end++;=0A=

=0A=

    for(stack=3D0;stack<8;stack++)=0A=

    {=0A=

        for(a=3D0;a<pos->tableau[stack].count;a++)=0A=

        {=0A=

            s_end +=3D =0A=

                sprintf(=0A=

                    s_end, =0A=

                    "%s%s", =0A=

                    ((a =3D=3D 0)? "" : " "),=0A=

                    card_to_string(pos->tableau[stack].cards[a], temp[0])=0A=

                );                                =0A=

        }=0A=

        *s_end =3D '\n';=0A=

        s_end++;=0A=

    }=0A=

    *s_end =3D '\0';=0A=

=0A=

    return strdup(buffer);=0A=

}=0A=

=0A=

=0A=

=0A=

=0A=

enum FCS_IFACE_MODES=0A=

{=0A=

    FCS_IFACE_MODE_DFS,=0A=

    FCS_IFACE_MODE_A_STAR,=0A=

=0A=

    FCS_IFACE_MODE_OPT =3D 0x10000,=0A=

};=0A=

#ifdef FC89=0A=

int Cvtf89(int fcn)=0A=

{=0A=

	if ((NumFCs > 7) && (fcn >=3D 7))=0A=

		return (fcn+3) ;=0A=

	return fcn ;=0A=

}=0A=

#endif=0A=

=0A=

struct fcs_extended_move_struct=0A=

{=0A=

    fcs_move_t move;=0A=

    int to_empty_stack;=0A=

};=0A=

=0A=

typedef struct fcs_extended_move_struct fcs_extended_move_t;=0A=

=0A=

=0A=

static char * render_move(fcs_extended_move_t move, char * string)=0A=

{=0A=

    /* Save the third character which will be set to '\0' by the sprintf.=0A=

     * It's a kludge, but it works.=0A=

     * */=0A=

#if 0=0A=

    char c =3D string[2];=0A=

	char b ;  //ABE=0A=

    int num_chars =3D 2;=0A=

#endif=0A=

    =0A=

    switch(fcs_move_get_type(move.move))=0A=

    {=0A=

        case FCS_MOVE_TYPE_STACK_TO_STACK:=0A=

                if (move.to_empty_stack && =
(fcs_move_get_num_cards_in_seq(move.move) > 1))=0A=

                {=0A=

                    sprintf(string, "%i%iv%x", =0A=

                        1+fcs_move_get_src_stack(move.move),=0A=

                        1+fcs_move_get_dest_stack(move.move),=0A=

                        fcs_move_get_num_cards_in_seq(move.move)=0A=

                        );=0A=

                }=0A=

                else=0A=

                {=0A=

                    sprintf(string, "%i%i", =0A=

                        1+fcs_move_get_src_stack(move.move),=0A=

                        1+fcs_move_get_dest_stack(move.move)=0A=

                        );=0A=

                }=0A=

        break;=0A=

=0A=

        case FCS_MOVE_TYPE_FREECELL_TO_STACK:=0A=

				sprintf(string, "%c%i", =0A=

#ifndef FC89=0A=

                    ('a'+fcs_move_get_src_freecell(move.move)),=0A=

#else=0A=

                    ('a'+Cvtf89(fcs_move_get_src_freecell(move.move))),=0A=

#endif=0A=

                    1+fcs_move_get_dest_stack(move.move)=0A=

                    );=0A=

		break;=0A=

=0A=

        case FCS_MOVE_TYPE_FREECELL_TO_FREECELL:=0A=

                sprintf(string, "%c%c",=0A=

#ifndef FC89=0A=

                    ('a'+fcs_move_get_src_freecell(move.move)),=0A=

                    ('a'+fcs_move_get_dest_freecell(move.move))=0A=

#else=0A=

                    ('a'+Cvtf89(fcs_move_get_src_freecell(move.move))),=0A=

                    ('a'+Cvtf89(fcs_move_get_dest_freecell(move.move)))=0A=

#endif=0A=

					);                        =0A=

        break;=0A=

=0A=

        case FCS_MOVE_TYPE_STACK_TO_FREECELL:=0A=

                sprintf(string, "%i%c",=0A=

                    1+fcs_move_get_src_stack(move.move),=0A=

#ifndef FC89=0A=

                    ('a'+fcs_move_get_dest_freecell(move.move))=0A=

#else=0A=

                    ('a'+Cvtf89(fcs_move_get_dest_freecell(move.move)))=0A=

#endif=0A=

                    );=0A=

//sprintf(szTemp, "StF fc-%d np-%d ", fcs_move_get_dest_freecell(move), =
NumFCs) ;=0A=

//MainMessage(szTemp) ;=0A=

		break;=0A=

=0A=

        case FCS_MOVE_TYPE_STACK_TO_FOUNDATION:=0A=

                sprintf(string, "%ih", =
1+fcs_move_get_src_stack(move.move));=0A=

        break;=0A=

        =0A=

=0A=

        case FCS_MOVE_TYPE_FREECELL_TO_FOUNDATION:=0A=

#ifndef FC89=0A=

				sprintf(string, "%ch", ('a'+fcs_move_get_src_freecell(move.move)));=0A=

#else=0A=

                sprintf(string, "%ch", =
('a'+Cvtf89(fcs_move_get_src_freecell(move.move))));=0A=

#endif=0A=

        break;=0A=

=0A=

        case FCS_MOVE_TYPE_SEQ_TO_FOUNDATION:=0A=

                sprintf(string, "%ih", =
fcs_move_get_src_stack(move.move));=0A=

        break;=0A=

=0A=

        default:=0A=

            string[0] =3D '\0';=0A=

        break;=0A=

    }=0A=

#if 0=0A=

    /* Restore that character */=0A=

    string[2] =3D c;=0A=

	b =3D string[0] ;  // Swap characters -- ABE=0A=

	string[0] =3D string[1] ;=0A=

	string[1] =3D b ;=0A=

#endif=0A=

    return string+strlen(string);=0A=

}=0A=

=0A=

static char * cmd_line_known_parameters[] =3D { NULL };=0A=

=0A=

=0A=

struct moves_processed_struct=0A=

{=0A=

    int next_move_idx;=0A=

    int num_moves;=0A=

    int max_num_moves;=0A=

    fcs_extended_move_t * moves;=0A=

};=0A=

=0A=

typedef struct moves_processed_struct moves_processed_t;=0A=

=0A=

void moves_processed_add_new_move(moves_processed_t * moves, =
fcs_extended_move_t new_move)=0A=

{=0A=

    moves->moves[moves->num_moves++] =3D new_move;=0A=

    if (moves->num_moves =3D=3D moves->max_num_moves)=0A=

    {=0A=

        moves->max_num_moves +=3D 32;=0A=

        moves->moves =3D realloc(moves->moves, sizeof(moves->moves[0]) * =
moves->max_num_moves);=0A=

    }=0A=

}=0A=

=0A=

moves_processed_t * moves_processed_gen(Position * orig, int NoFcs, void =
* instance)=0A=

{=0A=

    Position pos;=0A=

    moves_processed_t * ret;=0A=

    int virtual_stack_len[8];=0A=

    int virtual_freecell_len[12];=0A=

    int i, j, move_idx, num_back_end_moves;=0A=

    fcs_move_t move, out_move;=0A=

=0A=

    pos =3D *orig;=0A=

    =0A=

    ret =3D malloc(sizeof(*ret));=0A=

    ret->num_moves =3D 0;=0A=

    ret->max_num_moves =3D num_back_end_moves =3D =
freecell_solver_user_get_moves_left(instance);=0A=

    ret->moves =3D malloc(sizeof(ret->moves[0]) * ret->max_num_moves);=0A=

    ret->next_move_idx =3D 0;=0A=

=0A=

    for(i=3D0;i<8;i++)=0A=

    {=0A=

        virtual_stack_len[i] =3D orig->tableau[i].count;        =0A=

    }=0A=

    for(i=3D0;i<NoFcs;i++)=0A=

    {=0A=

        virtual_freecell_len[i] =3D (orig->hold[i] !=3D 0) ? 1 : 0;=0A=

    }=0A=

    =0A=

    for(move_idx=3D0; move_idx < num_back_end_moves ; move_idx ++)=0A=

    {=0A=

        /* =0A=

         * Move safe cards to the foundations =0A=

         * */=0A=

        while (1)=0A=

        {=0A=

            for(i=3D0;i<8;i++)=0A=

            {=0A=

                int rank, suit;=0A=

                Card card;=0A=

                =0A=

                if (pos.tableau[i].count > 0)=0A=

                {=0A=

                    card =3D =
pos.tableau[i].cards[pos.tableau[i].count-1];=0A=

                    rank =3D card & 0x0F;=0A=

                    suit =3D card >> 4;=0A=

                    /* Check if we can safely move it */=0A=

                    if ((pos.foundations[suit^0x1] > rank-2) &&=0A=

                        (pos.foundations[suit^0x1^0x2] > rank-2) && =0A=

                        (pos.foundations[suit^0x2] > rank-3) &&=0A=

                        (pos.foundations[suit] =3D=3D rank-1))=0A=

                    {=0A=

                        fcs_extended_move_t new_move;=0A=

                        =0A=

                        pos.foundations[suit]++;=0A=

                        pos.tableau[i].count--;=0A=

                        fcs_move_set_type(new_move.move, =
FCS_MOVE_TYPE_STACK_TO_FOUNDATION);=0A=

                        fcs_move_set_src_stack(new_move.move, i);=0A=

                        /* (suit+1)&0x3 converts it to FCS order */=0A=

                        fcs_move_set_foundation(new_move.move, =
(suit+1)&0x3);=0A=

                        moves_processed_add_new_move(ret, new_move);=0A=

                        =0A=

                        break;=0A=

                    }=0A=

                }=0A=

            }=0A=

            for(j=3D0;j<NoFcs;j++)=0A=

            {=0A=

                int rank, suit;=0A=

                Card card;=0A=

=0A=

                if (pos.hold[j] !=3D 0)=0A=

                {=0A=

                    card =3D pos.hold[j];=0A=

                    rank =3D card & 0x0F;=0A=

                    suit =3D card >> 4;=0A=

                    /* Check if we can safely move it */=0A=

                    if ((pos.foundations[suit^0x1] > rank-2) &&=0A=

                        (pos.foundations[suit^0x1^0x2] > rank-2) && =0A=

                        (pos.foundations[suit^0x2] > rank-3) &&=0A=

                        (pos.foundations[suit] =3D=3D rank-1))=0A=

                    {=0A=

                        fcs_extended_move_t new_move;=0A=

                        pos.foundations[suit]++;=0A=

                        pos.hold[j] =3D 0;=0A=

                        fcs_move_set_type(new_move.move, =
FCS_MOVE_TYPE_FREECELL_TO_FOUNDATION);=0A=

                        fcs_move_set_src_freecell(new_move.move, j);=0A=

                        fcs_move_set_foundation(new_move.move, =
(suit+1)&0x3);=0A=

                        moves_processed_add_new_move(ret, new_move);=0A=

=0A=

                        break;=0A=

                    }                        =0A=

                    =0A=

                }=0A=

            }=0A=

            if ((i =3D=3D 8) && (j =3D=3D NoFcs))=0A=

            {=0A=

                break;=0A=

            }=0A=

        }=0A=

        freecell_solver_user_get_next_move(instance, &move);=0A=

=0A=

        {=0A=

            int src, dest, len;=0A=

            Card card;=0A=

            switch(fcs_move_get_type(move))=0A=

            {=0A=

                case FCS_MOVE_TYPE_STACK_TO_FOUNDATION:=0A=

                    {=0A=

                        src =3D fcs_move_get_src_stack(move);=0A=

                        assert(virtual_stack_len[src] >=3D =
pos.tableau[src].count);=0A=

                        if (virtual_stack_len[src] =3D=3D =
pos.tableau[src].count)=0A=

                        {=0A=

                            len =3D virtual_stack_len[src];=0A=

                            card =3D pos.tableau[src].cards[len-1];=0A=

                            pos.foundations[card >> 4]++;=0A=

                            virtual_stack_len[src]--;=0A=

                            pos.tableau[src].count--;=0A=

                            {=0A=

                                fcs_extended_move_t ext_move;=0A=

                                ext_move.move =3D move;=0A=

                                                            =0A=

                                moves_processed_add_new_move(ret, =
ext_move);=0A=

                            }=0A=

                        }=0A=

                        else=0A=

                        {=0A=

                            virtual_stack_len[src]--;=0A=

                        }=0A=

                    }=0A=

                    break;=0A=

=0A=

                case FCS_MOVE_TYPE_FREECELL_TO_FOUNDATION:=0A=

                    {=0A=

                        src =3D fcs_move_get_src_freecell(move);=0A=

                        assert((virtual_freecell_len[src] =3D=3D 1));=0A=

                        if (pos.hold[src] =3D=3D 0)=0A=

                        {=0A=

                            /* Do nothing */=0A=

                        }=0A=

                        else=0A=

                        {=0A=

                            {=0A=

                                fcs_extended_move_t ext_move;=0A=

                                ext_move.move =3D move;=0A=

                                                            =0A=

                                moves_processed_add_new_move(ret, =
ext_move);=0A=

                            }=0A=

                            pos.hold[src] =3D 0;=0A=

                        }=0A=

                        virtual_freecell_len[src] =3D 0;=0A=

                    }=0A=

                    break;=0A=

=0A=

                case FCS_MOVE_TYPE_FREECELL_TO_STACK:=0A=

                    {=0A=

                        src =3D fcs_move_get_src_freecell(move);=0A=

                        dest =3D fcs_move_get_dest_stack(move);=0A=

                        assert(virtual_freecell_len[src] =3D=3D 1);=0A=

                        if (pos.hold[src] =3D=3D 0)=0A=

                        {=0A=

                            /* Do nothing */=0A=

                        }=0A=

                        else=0A=

                        {=0A=

                            {=0A=

                                fcs_extended_move_t ext_move;=0A=

                                ext_move.move =3D move;=0A=

                                moves_processed_add_new_move(ret, =
ext_move);=0A=

                            }=0A=

                            =
pos.tableau[dest].cards[pos.tableau[dest].count++] =3D pos.hold[src];=0A=

                            pos.hold[src] =3D 0;=0A=

                        }                        =0A=

                        virtual_freecell_len[src] =3D 0;=0A=

                        virtual_stack_len[dest]++;=0A=

                    }=0A=

                    break;=0A=

=0A=

               case FCS_MOVE_TYPE_STACK_TO_FREECELL:=0A=

                    {=0A=

                        src =3D fcs_move_get_src_stack(move);=0A=

                        dest =3D fcs_move_get_dest_freecell(move);=0A=

                        assert(virtual_stack_len[src] > 0);=0A=

                        assert(pos.tableau[src].count <=3D =
virtual_stack_len[src]);=0A=

                        if (pos.tableau[src].count < =
virtual_stack_len[src])=0A=

                        {=0A=

                            /* Do nothing */=0A=

                        }=0A=

                        else=0A=

                        {=0A=

                            {=0A=

                                fcs_extended_move_t ext_move;=0A=

                                ext_move.move =3D move;=0A=

                                moves_processed_add_new_move(ret, =
ext_move);=0A=

                            }=0A=

                            pos.hold[dest] =3D =
pos.tableau[src].cards[--pos.tableau[src].count];=0A=

                        }=0A=

                        virtual_stack_len[src]--;=0A=

                        virtual_freecell_len[dest] =3D 1;=0A=

                    }=0A=

                    break;=0A=

=0A=

               case FCS_MOVE_TYPE_STACK_TO_STACK:=0A=

                    {=0A=

                        int num_cards, virt_num_cards;=0A=

                        =0A=

                        src =3D fcs_move_get_src_stack(move);=0A=

                        dest =3D fcs_move_get_dest_stack(move);=0A=

                        num_cards =3D =
fcs_move_get_num_cards_in_seq(move);=0A=

                        assert(virtual_stack_len[src] >=3D =
pos.tableau[src].count);=0A=

                        if (virtual_stack_len[src] > =
pos.tableau[src].count)=0A=

                        {=0A=

#ifndef min=0A=

#define min(a,b) (((a)<(b))?(a):(b))=0A=

#endif=0A=

                            virt_num_cards =3D =
min((virtual_stack_len[src]-pos.tableau[src].count), num_cards);=0A=

#undef min=0A=

                            virtual_stack_len[src] -=3D virt_num_cards;=0A=

                            virtual_stack_len[dest] +=3D virt_num_cards;=0A=

                            num_cards -=3D virt_num_cards;=0A=

                        }=0A=

                        if (num_cards > 0)=0A=

                        {=0A=

                            fcs_move_set_type(out_move, =
FCS_MOVE_TYPE_STACK_TO_STACK);=0A=

                            fcs_move_set_src_stack(out_move, src);=0A=

                            fcs_move_set_dest_stack(out_move, dest);=0A=

                            fcs_move_set_num_cards_in_seq(out_move, =
num_cards);=0A=

                            {=0A=

                                fcs_extended_move_t ext_move;=0A=

                                ext_move.move =3D out_move;=0A=

                                ext_move.to_empty_stack =3D =
(pos.tableau[dest].count =3D=3D 0);=0A=

                                moves_processed_add_new_move(ret, =
ext_move);=0A=

                            }=0A=

                            for(i=3D0;i<num_cards;i++)=0A=

                            {=0A=

                                =
pos.tableau[dest].cards[pos.tableau[dest].count+i] =3D =
pos.tableau[src].cards[pos.tableau[src].count-num_cards+i];=0A=

                            }=0A=

                            pos.tableau[dest].count +=3D num_cards;=0A=

                            pos.tableau[src].count -=3D num_cards;=0A=

                            virtual_stack_len[dest] +=3D num_cards;=0A=

                            virtual_stack_len[src] -=3D num_cards;=0A=

                        }=0A=

                    }=0A=

                    break;=0A=

                =0A=

            }=0A=

        }=0A=

    }=0A=

=0A=

#if 0=0A=

    /* =0A=

     * This is a debugging code. It seems that everything works well =0A=

     * */=0A=

    {=0A=

        int count=3D0;=0A=

        for(i=3D0;i<8;i++)=0A=

        {=0A=

            count +=3D (pos.tableau[i].count =3D=3D 0);=0A=

            count +=3D (virtual_stack_len[i] =3D=3D 0);=0A=

        }=0A=

        for(i=3D0;i<NoFcs;i++)=0A=

        {=0A=

            count +=3D (pos.hold[i] =3D=3D 0);=0A=

            count +=3D (virtual_freecell_len[i] =3D=3D 0);=0A=

        }=0A=

        printf("count=3D%i\n", count);=0A=

    }=0A=

#endif=0A=

=0A=

    return ret;=0A=

    =0A=

}=0A=

=0A=

int moves_processed_get_moves_left(moves_processed_t * moves)=0A=

{=0A=

    return moves->num_moves- moves->next_move_idx;=0A=

}=0A=

=0A=

int moves_processed_get_next_move(moves_processed_t * moves, =
fcs_extended_move_t * move)=0A=

{=0A=

    if (moves->next_move_idx =3D=3D moves->num_moves)=0A=

    {=0A=

        return 1;=0A=

    }=0A=

    *move =3D moves->moves[moves->next_move_idx++];=0A=

    return 0;=0A=

}=0A=

=0A=

void moves_processed_free(moves_processed_t * moves)=0A=

{=0A=

    free(moves->moves);=0A=

    free(moves);=0A=

}=0A=

=0A=

=0A=

//int Free2Solver(Position * orig, int NoFcs, int limit, int mode, int =
option, char * * ret_moves)=0A=

int Free2Solver(Position * orig, int NoFcs, int limit, int =
cmd_line_argc, char * * cmd_line_argv,=0A=

	 int (*signal_step)(int step_limit))=0A=

{=0A=

    char * state_string;=0A=

    void * instance;=0A=

    int verdict;=0A=

    int num_iters;=0A=

    int ret;=0A=

    int current_limit =3D 1000;=0A=

    char * err_str;=0A=

    int ret_arg, parser_ret;=0A=

=0A=

=0A=

    state_string =3D position_to_string(orig, NoFcs);=0A=

    =0A=

    instance =3D freecell_solver_user_alloc();=0A=

=0A=

	NumFCs =3D NoFcs ;=0A=

=0A=

    parser_ret =3D freecell_solver_user_cmd_line_parse_args(=0A=

            instance,=0A=

            cmd_line_argc,=0A=

            cmd_line_argv,=0A=

            0,=0A=

            cmd_line_known_parameters,=0A=

            NULL,=0A=

            NULL,=0A=

            &err_str,=0A=

            &ret_arg=0A=

            );=0A=

=0A=

    if (parser_ret =3D=3D FCS_CMD_LINE_UNRECOGNIZED_OPTION)=0A=

    {=0A=

        freecell_solver_user_free(instance);        =0A=

        return 0;=0A=

    }=0A=

    =0A=

            =0A=

    freecell_solver_user_set_game(=0A=

        instance,=0A=

=0A=

        NoFcs,=0A=

        8,=0A=

        1,=0A=

        FCS_SEQ_BUILT_BY_ALTERNATE_COLOR,=0A=

        0,=0A=

        FCS_ES_FILLED_BY_ANY_CARD=0A=

        );=0A=

=0A=

    freecell_solver_user_limit_iterations(instance, current_limit);=0A=

=0A=

#if 0=0A=

    freecell_solver_user_set_solving_method(=0A=

        instance,=0A=

        (((mode & 0xFFFF) =3D=3D FCS_IFACE_MODE_DFS) ?=0A=

            FCS_METHOD_SOFT_DFS :=0A=

            FCS_METHOD_A_STAR=0A=

        )=0A=

    );=0A=

=0A=

    freecell_solver_user_set_solution_optimization(=0A=

        instance,=0A=

        (mode & FCS_IFACE_MODE_OPT) ? 1 : 0=0A=

        );=0A=

#endif=0A=

          =0A=
//MainMessage("SB") ;
    verdict =3D freecell_solver_user_solve_board(instance, state_string);=0A=
//MainMessage("PSB") ;
=0A=

    free(state_string);=0A=

=0A=

    while ((verdict =3D=3D FCS_STATE_SUSPEND_PROCESS) && =0A=

           (=0A=

                (limit > 0) ? =0A=

                    (current_limit < limit) :=0A=

                    1=0A=

           )=0A=

          )=0A=

    {=0A=

//        if (signal_step(current_limit, signal_step_context) !=3D 0)=0A=

        if (signal_step(current_limit) !=3D 0)=0A=

        {=0A=

            break;=0A=

        }=0A=

        current_limit +=3D 1000;=0A=

        freecell_solver_user_limit_iterations(instance, current_limit);=0A=

        verdict =3D freecell_solver_user_resume_solution(instance);=0A=

    }=0A=

=0A=

    num_iters =3D freecell_solver_user_get_num_times(instance);=0A=

=0A=

//    *ret_moves =3D NULL;=0A=

=0A=

    if (verdict =3D=3D FCS_STATE_WAS_SOLVED)=0A=

    {=0A=

        int num_moves;=0A=

        int a;=0A=

        fcs_extended_move_t move;=0A=

        char * str, * moves_string_proto;=0A=

        int len;=0A=

        moves_processed_t * moves_processed;=0A=

=0A=

        ret =3D num_iters;=0A=

        =0A=

        moves_processed =3D moves_processed_gen(orig, NoFcs, instance);=0A=

        num_moves =3D moves_processed_get_moves_left(moves_processed);=0A=

#ifdef SHLOMIF_DEBUG=0A=

        moves_string_proto =3D (char =
*)malloc(moves_processed->num_moves*8+1);=0A=

#else=0A=

        moves_string_proto =3D (char =
*)malloc(moves_processed->num_moves*4+1);=0A=

#endif=0A=

        =0A=

        /* a =3D num_moves-1; */=0A=

        str =3D moves_string_proto;=0A=

#ifdef SHLOMIF_DEBUG=0A=

        len =3D 0;=0A=

#endif=0A=

        while (! moves_processed_get_next_move(moves_processed, &move))=0A=

        {=0A=

=0A=

            str =3D render_move(move, str);=0A=

#ifdef SHLOMIF_DEBUG            =0A=

            *(str++) =3D ' ';=0A=

            if ((++len % 10) =3D=3D 0)=0A=

            {=0A=

                *(str++) =3D '\n';=0A=

            }=0A=

            *(str) =3D '\0';=0A=

#endif=0A=

        }=0A=

        moves_processed_free(moves_processed);=0A=

#ifndef SHLOMIF_DEBUG=0A=

        len =3D str-moves_string_proto;=0A=

        moves_string =3D malloc(len+1);=0A=

        for(a=3D0;a<len;a++)=0A=

        {=0A=

            moves_string[a] =3D moves_string_proto[len-1-a];=0A=

        }=0A=

        moves_string[a] =3D '\0';=0A=

        free(moves_string_proto);=0A=

#else=0A=

        moves_string =3D moves_string_proto;=0A=

#endif=0A=


#if 0=0A=

        moves_string[num_moves*2] =3D '\0';=0A=

#endif=0A=

=0A=

//        *ret_moves =3D moves_string;=0A=

    }=0A=

    else if (verdict =3D=3D FCS_STATE_IS_NOT_SOLVEABLE)=0A=

    {=0A=

		if (num_iters =3D=3D 0)=0A=

			num_iters++ ;=0A=

        ret =3D -num_iters;=0A=

    }=0A=

    else if ((verdict =3D=3D FCS_STATE_SUSPEND_PROCESS) || (verdict =
=3D=3D FCS_STATE_BEGIN_SUSPEND_PROCESS))=0A=

    {=0A=

        ret =3D 0;=0A=

    }=0A=

//MainMessage("FPI Exit1") ;       =20
    =0A=

    freecell_solver_user_free(instance);=0A=

=0A=
//MainMessage("FPI Exit2") ;       =20

    return ret;=0A=

}=0A=

=0A=

#if 0=0A=

=0A=

static int my_signal_step(int step_limit)=0A=

{=0A=

    printf("num_iters=3D%i\n", step_limit);=0A=

    return 0;=0A=

}=0A=
#if 0
int main(int argc, char * argv[])=0A=

{=0A=

    Position mypos;=0A=

    int ret;=0A=

=0A=

#include "fill_pos.cpp"=0A=

=0A=

    ret =3D Free2Solver(&mypos, 4, 150000, argc-1, argv+1, =
my_signal_step);=0A=

=0A=

    printf("%i\n", ret);=0A=

=0A=

    printf("%s\n", moves_string);=0A=

=0A=

    return 0;=0A=

}=0A=
#endif
#endif=0A=


------=_NextPart_000_0036_01C5BF8F.C76DFD70--


