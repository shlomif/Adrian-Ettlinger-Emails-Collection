Return-Path: <aettlinger@worldnet.att.net>
Delivered-To: shlomif@vipe.technion.ac.il
Received: (qmail 2341 invoked from network); 18 Nov 2001 12:30:38 -0000
Received: from mtiwmhc22.worldnet.att.net (204.127.131.47)
  by vipe.technion.ac.il with SMTP; 18 Nov 2001 12:30:38 -0000
Received: from computer ([12.78.218.38]) by mtiwmhc22.worldnet.att.net
          (InterMail vM.4.01.03.27 201-229-121-127-20010626) with SMTP
          id <20011118123025.EJYY4554.mtiwmhc22.worldnet.att.net@computer>
          for <shlomif@vipe.technion.ac.il>;
          Sun, 18 Nov 2001 12:30:25 +0000
Message-ID: <004501c17024$5bd7fde0$26da4e0c@computer>
From: "Adrian Ettlinger" <aettlinger@worldnet.att.net>
To: "Shlomi Fish" <shlomif@vipe.technion.ac.il>
References: <Pine.LNX.4.33L2.0111171627220.11850-100000@vipe.technion.ac.il>
Subject: OT & FCS
Date: Sun, 18 Nov 2001 06:21:25 -0500
MIME-Version: 1.0
Content-Type: text/plain;
  charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
X-Priority: 3
X-MSMail-Priority: Normal
X-Mailer: Microsoft Outlook Express 5.00.2615.200
X-MimeOLE: Produced By Microsoft MimeOLE V5.00.2615.200
Status: R
X-Status: N
X-Keywords: 
X-UID: 35
X-KMail-EncryptionState: 
X-KMail-SignatureState: 
X-KMail-MDN-Sent: 

Hi Shlomi,

    Thanks for the excellent capsule summary of the Old Testament.  That's
all stuff that I know I've heard before, but hadn't thought of for so long,
it escaped me.  Re:

<<Note that this is what the bible tells us. It is possible that the
Israelites originated from the Hebrew-speaking Kanaanites, and later
believed in the entire exile in Egypt thing.>>
    That sounds like what my friend Stan recently told me he'd been reading.
That some historians believe that the exile and return from Egypt did not
actually ever occur in history.

<<Yes, but I need to know how to deal all the boards above 2^31, as the
Microsoft randomization routine only accepts seeds of up to that. And FC-Pro
supports 2^33 deals.>>
    With the idea I have for implementation, at least what's on my mind now,
I don't think you will need it, as I'm thinking I'll deal the boards.  But,
for possible future reference, or if you want it for some other purpose, I'm
appending our code below. Part of it is that we created as alternative
rand() function, called randp().  The constants used there are the same as
those used in the standard rand(), but it's expanded to accept 2^32 seed
values.

    This occurs to me:  If all we were going to ask you to do would be to
solve original deals, we could just pass you a game number and a number of
freecells.  In fact, we could start out testing that way if there's a
problem in implementing a mutual format for the board.  But I really want
eventually to use your solver to attack intermediate positions, and for that
I need to be able to feed you any arbitrary board.

    Did you receive my message with the subject "Ready to roll" ?  Where I
give you the specs for the desired function and attached structure code?
Well, already, there's a change I'd like to make.  In the return value your
function should deliver.  The reason for this is that I like to report for
each hand the number of interations that the solver took, whether it finds
it possible or impossible.  So I'd like to change my spec for return value
(int) to:

Return value:  0 = limit expired;   <0 = Impossible, negated number of
iterations  >0 = Solution found, positive number of iterations.

    I'll separately resend the entire message, to make sure you got it.
I'll make the above change in the resent message.

Best regards, ------------Adrian (board dealing code follows)

===========================================
VOID srandp(UINT s)
{
 seedx = (LONG)s ;
}

UINT randp()
{
 seedx = seedx * 214013L + 2531011L ;
 return (seedx & 0xffff0000) >> 16 ;
}

// the randomness of this deal routine was graciously given to us by
// jim horne (at microsoft?), creater of freecell!
//
VOID FreeCellDeal (VOID)
{
    int  i, j;                  // generic counters
    int  wLeft = NUM_CARDS;  // cards left to be chosen in shuffle
    CARD deck[NUM_CARDS];       // deck of 52 unique cards

 /* clear deck */

 FreeCellDealInit ();

 if (gbCustomGame)
 {
     /* read in cards */
  CustomDeal ();
 }
 else
 {
  /* shuffle cards */

  for (i = 0; i < NUM_CARDS; i++) // put unique card in each deck loc.
   deck[i] = i;

  if (gnGameNumber < 0x100000000)
   srand ((UINT)gnGameNumber);           // game number is seed for rand()
  else
   srandp ((UINT)(gnGameNumber - 0x100000000)); // use separate seed for
local randp()
  for (i = 0; i < NUM_CARDS; i++)
  {
   if (gnGameNumber < 0x100000000)
    if (gnGameNumber < 0x80000000)
     j = rand() % wLeft;
    else
     j = (rand() | 0x8000) % wLeft ; // needed for 2nd 2 gigabyte games
   else
    j = (randp() + 1) % wLeft;  // offset by one for greater diversity
   card[(i%8)+1][i/8] = deck[j];
   deck[j] = deck[--wLeft];
  }

  /* init Column Length */

  for (i = 0; i < (NUM_COLS / 2); i++)
  {
   ColLen[i] = 7;
  }
  for (i = (NUM_COLS / 2); i < NUM_COLS; i++)
  {
   ColLen[i] = 6;
  }
 }
}




