Return-Path: <aettlinger@worldnet.att.net>
Delivered-To: shlomif@vipe.technion.ac.il
Received: (qmail 13169 invoked from network); 30 Nov 2001 11:19:55 -0000
Received: from mtiwmhc24.worldnet.att.net (204.127.131.49)
  by vipe.technion.ac.il with SMTP; 30 Nov 2001 11:19:55 -0000
Received: from computer ([12.78.219.198]) by mtiwmhc24.worldnet.att.net
          (InterMail vM.4.01.03.27 201-229-121-127-20010626) with SMTP
          id <20011130111942.EVYD13117.mtiwmhc24.worldnet.att.net@computer>;
          Fri, 30 Nov 2001 11:19:42 +0000
Message-ID: <004901c17990$d410b200$c6db4e0c@computer>
From: "Adrian Ettlinger" <aettlinger@worldnet.att.net>
To: "Shlomi Fish" <shlomif@vipe.technion.ac.il>
Cc: <fomalhaut@earthlink.net>
References: <Pine.LNX.4.33L2.0111291147040.25081-100000@vipe.technion.ac.il>
Subject: Project status
Date: Fri, 30 Nov 2001 06:03:58 -0500
MIME-Version: 1.0
Content-Type: text/plain;
  charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
X-Priority: 3
X-MSMail-Priority: Normal
X-Mailer: Microsoft Outlook Express 5.00.2615.200
X-MimeOLE: Produced By Microsoft MimeOLE V5.00.2615.200
Status: RO
X-Status: A
X-Keywords: 
X-UID: 4
X-KMail-EncryptionState: 
X-KMail-SignatureState: 
X-KMail-MDN-Sent: 

Hi Shlomi,

<<What I would like is for the solver to report the times in which it
started and finished to solve each board. I don't think seconds would be
accurate engough so I'd also suggest adding microseconds (or at least
milliseconds).>>
    I don't think microseconds would be feasible, but milliseconds might.
The time function I am using only delivers time to one-second precision.
Looking through Help, I see there is another function that might be used for
millliseconds, but it's a function I've never had any experience in using.
Do you know anything about this?  Or do you know of any source for the
know-how in how to use that function?  It's always very time-consuming for
me whenever I try to figure out how to use some new function that I've never
used before.

<<But please refer to the random-DFS report that I'm about to post to
fc-solve-discuss.>>
    I see it.  Sound promising.  But don't we need some code modifications
to make this available in the FcPro implementation?

    I'm wondering, where we stand now, if you consider the FcPro integration
a useful tool for you for further development of FCS?  I'm also wondering,
since we're now at a point where the next major step is to tinker with
various modes of operation of FCS, such as you have done with random-DFS,
whether it's efficient for me to stay in the loop for further work in
perfecting it.  I would think you could do most of what needs to be done
yourself, within the confines of your own code and the free2.c module which
I wrote.  There might need to be some changes elsewhere, such as in
fcplay.c, to take care of the replay problem, and if you have changes you'd
like to make there or elsewhere, it'd be important you kept me up to date.

    What do you think?

Best regards,  ---------------------Adrian


