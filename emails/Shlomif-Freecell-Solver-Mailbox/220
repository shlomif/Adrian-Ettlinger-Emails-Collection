Status: RO
X-Status: A
X-Keywords: 
Return-Path: <aettlinger@worldnet.att.net>
Delivered-To: shlomif@vipe.technion.ac.il
Received: (qmail 4273 invoked from network); 27 Jul 2002 16:12:01 -0000
Received: from mtiwmhc22.worldnet.att.net (204.127.131.47)
  by vipe.technion.ac.il with SMTP; 27 Jul 2002 16:12:01 -0000
Received: from computer ([12.78.220.89]) by mtiwmhc22.worldnet.att.net
          (InterMail vM.4.01.03.27 201-229-121-127-20010626) with SMTP
          id <20020727161158.RWDJ2117.mtiwmhc22.worldnet.att.net@computer>
          for <shlomif@vipe.technion.ac.il>;
          Sat, 27 Jul 2002 16:11:58 +0000
Message-ID: <000f01c23587$cb9fcda0$59dc4e0c@computer>
From: "Adrian Ettlinger" <aettlinger@worldnet.att.net>
To: "Shlomi Fish" <shlomif@vipe.technion.ac.il>
References: <Pine.LNX.4.33L2.0207271618280.2456-100000@vipe.technion.ac.il>
Subject: Re: I'm back [was Re: Timings -- quotes were the problem]
Date: Sat, 27 Jul 2002 12:07:15 -0400
MIME-Version: 1.0
Content-Type: multipart/mixed;
  boundary="----=_NextPart_000_000C_01C23566.26039320"
X-Priority: 3
X-MSMail-Priority: Normal
X-Mailer: Microsoft Outlook Express 5.00.2615.200
X-MimeOLE: Produced By Microsoft MimeOLE V5.00.2615.200
X-KMail-EncryptionState: 
X-KMail-SignatureState: 
X-KMail-MDN-Sent: 

This is a multi-part message in MIME format.

------=_NextPart_000_000C_01C23566.26039320
Content-Type: text/plain;
	charset="iso-8859-1"
Content-Transfer-Encoding: 7bit

Hi Shlomi,

    I'm usually on-line only in the evenings and the morning, but just by a
fluke happened to go on-line midday, and saw that you were expecting a
quicker reply from me.  Hope you enjoyed your dinner.  What kind of
restaurant did you go to?  I suppose not all restaurants in Israel are
Kosher.  Any Mexican restaurants there?  Chinese?

    I'm attaching cmd_line_chop.c as I revised it.  You'll see I just
modified the definitions to be more all-inclusive.

Best regards,   -----------------Adrian


------=_NextPart_000_000C_01C23566.26039320
Content-Type: application/octet-stream;
	name="cmd_line_chop.c"
Content-Transfer-Encoding: quoted-printable
Content-Disposition: attachment;
	filename="cmd_line_chop.c"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "main.h"

#ifdef DMALLOC
#include <dmalloc.h>
#endif

#define ARGS_MAN_GROW_BY 30

struct args_man_struct
{
    int argc;
    char * * argv;
    int max_num_argv;
};

typedef struct args_man_struct args_man_t;

args_man_t * args_man_alloc(void)
{
    args_man_t * ret;
    ret =3D malloc(sizeof(args_man_t));
    ret->argc =3D 0;
    ret->max_num_argv =3D ARGS_MAN_GROW_BY;
    ret->argv =3D malloc(sizeof(ret->argv[0]) * ret->max_num_argv);
    return ret;
}

void args_man_free(args_man_t * manager)
{
    int a;
    for(a=3D0;a<manager->argc;a++)
    {
        free(manager->argv[a]);
    }
    free(manager->argv);
    free(manager);
}

//#define skip_ws() { while((*s =3D=3D ' ') || (*s =3D=3D '\t')) { s++; =
} }
//#define skip_non_ws() { while((*s !=3D ' ') && (*s !=3D '\t') && (*s)) =
{ s++; }}
#define skip_ws() { while(((*s <=3D ' ') && (*s !=3D '\0')) || (*s =
=3D=3D '\t') || (*s =3D=3D '\\')) { s++; } }
#define skip_non_ws() { while(((*s > ' ') || (*s =3D=3D '\0')) && (*s =
!=3D '\t') && (*s !=3D '\\') && (*s)) { s++; }}
int args_man_chop(args_man_t * manager, char * string)
{
    char * s =3D string;
    char * start;
    char * end;
    char * new_arg;
   =20
    while (*s !=3D '\0')
    {
        skip_ws();
        if (*s =3D=3D '\0')
        {
            break;
        }
        start =3D s;
        skip_non_ws();
        end =3D s;
        new_arg =3D malloc(end-start+1);
        strncpy(new_arg, start, end-start);
        new_arg[end-start] =3D '\0';
        manager->argv[manager->argc] =3D new_arg;
        manager->argc++;
        if (manager->argc =3D=3D manager->max_num_argv)
        {
            manager->max_num_argv +=3D ARGS_MAN_GROW_BY;
            manager->argv =3D realloc(manager->argv, =
sizeof(manager->argv[0]) * manager->max_num_argv);
        }
    }
    return 0;
}

#if 0
int main(int argc, char * * argv)
{
    args_man_t * args_man =3D args_man_alloc();
    args_man_chop(args_man, argv[1]);
    {
        int a;
        for(a=3D0;a<args_man->argc;a++)
        {
            printf("argv[%i] =3D \"%s\"\n", a, args_man->argv[a]);
        }
    }
    args_man_free(args_man);

    return 0;
}
#endif
args_man_t * args_man ;
void argsPreSolve(LPSTR istr)
{
//    args_man_t * args_man =3D args_man_alloc();
    args_man =3D args_man_alloc();
    args_man_chop(args_man, istr);
}

void argsPostSolve(void)
{
	args_man_free(args_man);
}

------=_NextPart_000_000C_01C23566.26039320--

